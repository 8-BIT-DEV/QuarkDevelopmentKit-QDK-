#ifndef QUARK_H
#define QUARK_H

#include <QS-main.h>

#define on_run void Q_MAIN()
#define Main_Kickstarter void Q_MAIN()
#define Create_Objects CConsole console; CConvert convert

#define dget(return_val) std::cin >> return_val
#define cget(return_val) std::cin >> return_val
#define dget_chain std::cin >>
#define qpause _getch()
#define qchar 1001

#define ignore_input ignore_input()
#define ignore_keyPress ignore_keyPress()

#define VarDump__

struct CConsole {
    string pause_mesg = "";
    
    void print(int output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }
    void print(string output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        } 
    }
    void print(float output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }
    void print(double output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }
    void print(long output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }
    void printc(char* output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }
    void printc(const char* output, bool line_end = false) {
        if (line_end == true) {
            std::cout << output << endl;
        }
        else {
            std::cout << output;
        }
    }

    void ignore_input {
        std::cin.ignore();
    }
    void ignore_keyPress {
        _getch();
    }

    enum pause_typeENUM {
        bsc, mesg
    };
    pause_typeENUM pBSC = bsc;
    pause_typeENUM pMESG = mesg;
    
    void pause(int pause_mode) {
        if (pause_mode == 0) {
            _getch();
        }
        else if (pause_mode == 1) {
            std::cout << pause_mesg;
            _getch();
        }
    }

    struct CGet {
        string s(string prefix = "") {
            std::cout << prefix;
            string return_val;
            std::cin >> return_val;

            return return_val;
        }
        int i(string prefix = "") {
            std::cout << prefix;
            int return_val;
            std::cin >> return_val;

            return return_val;
        }
        float f(string prefix = "") {
            std::cout << prefix;
            float return_val;
            std::cin >> return_val;
            return return_val;
        }
        double d(string prefix = "") {
            std::cout << prefix;
            double return_val;
            std::cin >> return_val;
            return return_val;
        }
        const char* cc(string prefix = "") {
            std::cout << prefix;
            char TEMPreturn_val[1001];
            std::cin >> TEMPreturn_val;
            const char* return_val = TEMPreturn_val;
            return return_val;
        }
        char* c(string prefix = "") {
            std::cout << prefix;
            char TEMPreturn_val[1001];
            std::cin >> TEMPreturn_val;
            char* return_val = TEMPreturn_val;
            return return_val;
        }
    };
    CGet get;
};

struct CConvert {
    struct CFrom_string {
        int to_int(string num) {
            int return_val = std::stoi(num);
            return return_val;
        }
        float to_float(string num) {
            float return_val = std::stof(num);
            return return_val;
        }
        long to_long(string num) {
            long return_val = std::stol(num);
            return return_val;
        }
        double to_double(string num) {
            double return_val = std::stod(num);
            return return_val;
        }
    };
    struct CFrom_int {
        string to_string(int num) {
            string return_val = std::to_string(num);
            return return_val;
        }
    };
    CFrom_string from_string;
    CFrom_int from_int;
};

#endif